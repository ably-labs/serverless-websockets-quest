{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Serverless WebSockets Quest",
  "steps": [
    {
      "description": "### Tech stack\r\n\r\nThese are the high-level components used for the game:\r\n\r\n- [Azure Functions](https://docs.microsoft.com/azure/azure-functions/functions-overview), a serverless compute offering in Azure. This is used to create the HTTP API that clients can interact with.\r\n  - [Entity Functions](https://docs.microsoft.com/azure/azure-functions/durable/durable-functions-entities?tabs=csharp), an extension of Azure Functions, used to persist small pieces of game & player state.\r\n- [Ably](https://ably.com/), an [edge messaging](https://ably.com/blog/ably-launches-state-of-edge-messaging) solution, that offers serverless [WebSockets](https://ably.com/resources/ebooks/websocket-handbook) to distribute data in realtime.\r\n- [VueJS](https://vuejs.org/), a well-known front-end framework.\r\n- [Azure Static Web Apps](https://docs.microsoft.com/azure/static-web-apps/overview), a hosting solution that serves the static files.\r\n\r\n![Communication between player devices and the serverless application](./media/communication-between-back-end-and-front-end.png)"
    },
    {
      "directory": "api/Functions",
      "description": "### The game API\r\n\r\nThe API of the game exposes several HTTP endpoints which are implemented in C# (.NET 6) Azure Functions.\r\n\r\n- **CreateQuest**; triggered by the first player to start a new quest.\r\n- **GetQuestExists**;  triggered by players who would like to join a quest to determine if they provided a valid quest ID.\r\n- **AddPlayer**; triggered by the player once they have selected their character and name.\r\n- **ExecuteTurn**; triggered by the player when they want to attack.\r\n- **CreateTokenRequest**; provides an authentication token and is triggered when a connection to Ably is made via the front-end."
    },
    {
      "file": "api/Functions/CreateQuest.cs",
      "description": "### CreateQuest function\r\n\r\nThe `CreateQuest` function is triggered by the first player to start a new Quest.",
      "line": 24
    },
    {
      "file": "api/Functions/GetQuestExists.cs",
      "description": "### GetQuestExists function\r\n\r\nThe `GetQuestExists` function is triggered by players who would like to join a quest to determine if they provided a valid quest ID.",
      "line": 23
    },
    {
      "file": "api/Functions/AddPlayer.cs",
      "description": "### AddPlayer function\r\n\r\nThe `AddPlayer` function is triggered by the player once they have selected their character and name.",
      "line": 24
    },
    {
      "file": "api/Functions/ExecuteTurn.cs",
      "description": "### ExecuteTurn function\r\n\r\nThe `ExecuteTurn` function is triggered by the player when they do an attack.",
      "line": 23
    },
    {
      "file": "api/Functions/CreateTokenRequest.cs",
      "description": "### CreateTokenRequest function\r\n\r\nThe `CreateTokenRequest` function provides an Ably authentication token and is triggered when a connection to Ably is made via the front-end.",
      "line": 21
    },
    {
      "directory": "api/Models",
      "description": "### Model classes\r\n\r\nAll Azure Functions are just a couple of lines of code. The majority of the game logic is implemented in the `GameEngine`, `GameState`, and `Player` classes. All functions related to game interaction only call methods in the `GameEngine` class. The `GameEngine` class is responsible for the game flow, and updating the state of the game and player objects.\r\n\r\n![Communication flow within the HTTP Azure Functions](./media/communication-flow-in-the-azure-function.png)"
    },
    {
      "directory": "api/Models",
      "description": "### Creating a new Quest\r\n\r\nTo illustrate how Azure Functions and the `GameEngine`, `GameState`, and `Player` classes work together, I'll show the `CreateQuest` functionality starting at the Azure Function, and ending with publishing messages using Ably."
    },
    {
      "file": "api/Functions/CreateQuest.cs",
      "description": "### CreateQuest function -> GameEngine\r\n\r\nThe `CreateQuest` HTTP function is triggered when a player clicks the *Start Quest* button. A new quest ID is generated client side and provided in the request. \r\n\r\nIf the request is valid, this function will call the `CreateQuestAsync()` method in the `GameEngine` class.",
      "line": 35
    },
    {
      "file": "api/Models/GameEngine.cs",
      "description": "### GameEngine\r\n\r\nThe `GameEngine` is responsible for the majority of the game flow and orchestrates actions using the `GameState` and `Player` classes.",
      "line": 8
    },
    {
      "file": "api/Models/GameEngine.cs",
      "description": "### InitializeGameStateAsync\r\n\r\nThe `InitializeGameStateAsync` method is responsible for:\r\n\r\n- Creating the monster, a `Player` (a non-player character, NPC).\r\n- Creating the initial `GameState` that contains the quest ID and the name of the game phase.\r\n- Adding the monster to the list of players in the `GameState`.",
      "line": 49
    },
    {
      "file": "api/Models/Player.cs",
      "description": "### Player entity function\r\n\r\nThe `Player` entity function is responsible for maintaining the state of a player in the game. The game has four players: the monster (NPC), and 3 real players. Each one has their own `Player` entity function.",
      "line": 11
    },
    {
      "file": "api/Models/Player.cs",
      "description": "### Player -> Ably\r\n\r\nOnce a `Player` entity is initialized, a message will be published to an Ably channel. The players who have joined the quest are subscribed to this channel and will receive a message that a new player has joined.",
      "line": 42
    },
    {
      "file": "api/Models/GameState.cs",
      "description": "### `GameState` entity function\r\n\r\nThe `GameState` entity function is responsible for maintaining the state of the game, such as the quest ID, the player names, and the game phase (start, character selection, play, end).",
      "line": 13
    },
    {
      "file": "api/Models/GameState.cs",
      "description": "### GameState -> Ably\r\n\r\nOnce the QuestId and Phase have been set a message is published to advance the player to the next game phase.",
      "line": 34
    },
    {
      "file": "api/Models/Publisher.cs",
      "description": "### Publisher\r\n\r\nThe final step of game logic functionality in the API is publishing messages to the players that have joined the quest. Since several classes need access to this functionality, I've wrapped it in a `Publisher` class for ease of use.",
      "line": 7
    },
    {
      "file": "src/stores/index.ts",
      "description": "### WebSocket connection\r\n\r\nThe client-side is subscribed to the messages published via the API using the realtime Ably client that is based on WebSockets. Based on the type of message received, the game progresses to the next phase, and local player state is updated. So, even though this is a turn-based game, updates in the API result in realtime communication with the players to update their local player state.\r\n\r\nThe clients require a connection to Ably to receive messages in realtime. The `createRealtimeConnection` function is called when players start a new quest or join a quest.",
      "line": 173
    },
    {
      "file": "src/stores/index.ts",
      "description": "### Subscribe\r\n\r\nThe player is subscribing to specific messages that control the game play.",
      "line": 213
    },
    {
      "file": "src/stores/index.ts",
      "description": "### handlePlayerIsUnderAttack\r\n\r\nAs an example of how the front-end updates when a player attacks, let's have a look how the `player-under-attack` message is handled.",
      "line": 307
    },
    {
      "file": "src/stores/index.ts",
      "description": "### updatePlayer\r\n\r\nThe `updatePlayer` method updates the player data in the local Vue store (Pinia).",
      "line": 121
    },
    {
      "file": "src/components/PlayerUnit.vue",
      "description": "### PlayerUnit\r\n\r\nThe `PlayerUnit` Vue component uses the Vue data store to display the character information.",
      "line": 36
    }
  ]
}